<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>#springMessage("view.tms35.rule.list.title")</title>
<link href="$rc.contextPath/s/common/css/page.css" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="$rc.contextPath/s/common/js/jquery.min.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/tms35/js/jquery-ui.min.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/common/js/browser.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/common/js/jcl.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/common/env/env.js"></script> 
<script type="text/javascript" src="$rc.contextPath/s/common/env/message.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/tms35/js/draw_rule.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/common/js/jcl_tms_json.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/common/js/jquery.url.js"></script>
<script type="text/javascript"> 
var nodeArr = new Array();// [xay,nodeid],画完的节点都存在这个数组中，删除修改时需要
var lineArr = new Array();// [x1ay1|x2ay2,lineName],画完的连线都存在这个数组中，删除修改时需要
$(document).ready(function (){
	var txnId = jQuery.url.param("txnId");
	txnId = "T0101";
	var rootPath = '$rc.contextPath/s/';
	var isDraw=false;
	var groupNum = 0 ;
	
	// 初始化页面，如果该交易下没有规则，则取父交易的规则。
	jcl.postJSON('/tms35/rule/list','RULE_TXN='+txnId,function(data){
		var jsonList = data.ruleJson;
		// 画线，画点
		$.each(jsonList, function(idx,item){
			var rule = json2Object(item);
			var ruleId = rule.RULE_ID;
			var position = rule.POSITION;// 规则坐标【XaY】
			var px = position.split("a");
			var start_x = parseInt(px[0]);// 节点的横坐标，连线的开始横坐标
			var start_y = parseInt(px[1]);// 节点的纵坐标，连线的开始纵坐标
			var directionals = rule.DIRECTIONAL;
			var ruleName = rule.RULE_DESC;
			var ruleEnable = rule.RULE_ENABLE;
			// 画节点
			var node = new Node(item,rootPath);
			if(ruleEnable == '0'){
				node.setImgSrc(rootPath+'tms35/images/node_status_0.bmp');
			}
			node.drawImg(start_x,start_y);
				
			// 画连接线，由当前规则发出的连线
			for(var i = 0;i<directionals.length;i++){
				// 通过规则ID查找规则的坐标
				var direcRulePost = queryPostByRuleId(jsonList,directionals[i]);
				var direcx = direcRulePost.split("a");// 规则坐标[xay]
				var end_x = parseInt(direcx[0]);// 连线的结束横坐标
				var end_y = parseInt(direcx[1]);// 连线的结束纵坐标
					
				// 画连接线
				var line = new Line("line_"+groupNum);
				line.setPoint(ruleId,directionals[i]);
				line.drawArrowLine(start_x, start_y, end_x, end_y);  
					
				// 连线ID的自变量+1					
				groupNum++;
			}
		});
		
	});
	
	// 增加规则按钮点击事件
	$('#add_rule').click(function(){ 
		// 弹出规则新建页面
		window.showModalDialog("$rc.contextPath/tms35/rule/add?txnId="+txnId,window,'dialogWidth=1000px;dialogHeight=600px;resizable=yes');	
	});
	
	// 修改规则按钮点击事件
	$('#edit_rule').click(function(){ 
		// 获取选择的规则对象
		var radio_o = $("input[name='r'][type='radio']:checked"); 
		if (radio_o == null || radio_o.length == 0) {
			alert('#springMessage("view.tms.pub.checkbox.msg0")');
			return;
		}
		
		var rule=radio_o.parent().find("input[name='rulejson']").val();
		/*var a = eval("("+rule+")");
		// 获取规则ID
		var img = radio_o.parent().parent().parent().parent().children().children().children().find('img');
		var ruleId = img.attr('id');
		*/
		// 弹出规则新建页面
		window.showModalDialog("$rc.contextPath/tms35/rule/edit?json="+rule+"&txnId="+txnId,window,'dialogWidth=1000px;dialogHeight=600px;resizable=yes');	
	});
	
	var start_tab;// 画线的开始对象
	
	// 画线按钮的点击事件
	$('#drow_line').click(function(){
		// 鼠标按下开始画线
		$("img").mousedown(function(e){
			if(!isDraw){
				start_tab = this;
				// 有开始点才可用画线
				isDraw = true;
			}else{
				var p_rule_id = $(start_tab).attr('id');
				var c_rule_id = $(this).attr('id');
				if(start_tab != this){
					var p_rule = $("input[id='"+p_rule_id+"'][name='rulejson']").val();
					var p_ruleObj = json2Object(p_rule);
					var p_txn = p_ruleObj.RULE_TXN;
					var c_rule = $("input[id='"+c_rule_id+"'][name='rulejson']").val();
					var c_ruleObj = json2Object(c_rule);
					var c_txn = c_ruleObj.RULE_TXN;
					
					if(txnId != p_txn && txnId != c_txn){
						alert("父交易的规则不能连线");
						isDraw=false;// 画线结束
						$("img").unbind('mousedown');// 连接线完成，取消画板的画图事件
						return ;
					}
					
					var tab_width = this.style.width;
					var tab_height = this.style.height;
					var start_x = start_tab.style.left;// 开始节点的横坐标
				    var start_y = start_tab.style.top;// 开始节点的纵坐标
					var ruleId = start_tab.id;// 开始节点规则ID
					var start_x_1 = parseInt(start_x.substring(0,start_x.length-2));// 开始节点的横坐标去掉PX
					var start_y_1 = parseInt(start_y.substring(0,start_y.length-2));// 开始节点的纵坐标去掉PX
					var end_x = this.style.left;// 结束节点的横坐标
					var end_y = this.style.top;// 结束节点的纵坐标
					var child_ruleid = this.id;// 结束节点的规则ID
					var end_x_1 = parseInt(end_x.substring(0,end_x.length-2));// 结束节点的横坐标去掉PX
					var end_y_1 = parseInt(end_y.substring(0,end_y.length-2));// 结束节点的纵坐标去掉PX
					// 如果已经有连线不再画,也不能相互连线
					if(queryLineIsExistAll(start_x_1,start_y_1,end_x_1,end_y_1)){
						alert('连线已存在');
						isDraw=false;// 画线结束
						$("img").unbind('mousedown');// 连接线完成，取消画板的画图事件
						return;
					}
					// 画线，连接开始点和结束点					
					var line = new Line("line_"+groupNum); 
					line.setPoint(p_rule_id,c_rule_id);
					line.drawArrowLine(start_x_1, start_y_1 , end_x_1, end_y_1);  
					
					// 更新json串
					updateJson_addLine(p_rule_id,c_rule_id);	
									
					// 连线的自变量名称+1
					groupNum++;
				}
				
				isDraw=false;// 画线结束
				
				// 连接线完成，取消画板的画图事件
				$("img").unbind('mousedown');
			}
		});
	});
	
	var select_lineName ;// 选中的连线名称
		
	// 连接线选择事件
	$('span').on('mousedown',function(){
		var this_lineName = $(this).attr('name');
		var line = new Line(this_lineName); 
		
		// 	其他线恢复原色
		var spanOb = $('span');
		for(var i=0;i<spanOb.length;i++){
			spanOb[i].style.backgroundColor = line.getColor();
		}
		
		// 当前选择的线变蓝色
		var spans = $("span[name='"+this_lineName+"']");
		var len = spans.length;   
        for (var i = 0; i < len; i++) {   
            spans[i].style.background = 'blue';   
        } 
		
		//  记录选择的线，删除时使用
		select_lineName = this_lineName;
	});


	// 连接线删除事件
	$('#del_line').on('click',function(){
		if (select_lineName == null) {
			alert("请先选择一条连接线");
			return ;	
		}
		
		// 更新JSON串，把开始节点的指向删除
		var p = $("input[type='hidden'][id='"+select_lineName+"']").val();
		var ps = p.split('|');
		var start_json = $("input[id='"+ps[0]+"'][name='rulejson']").val();
		var start_jsonObj = json2Object(start_json);
		var p_txn = start_jsonObj.RULE_TXN;
		
		var c_rule = $("input[id='"+ps[1]+"'][name='rulejson']").val();
		var c_ruleObj = json2Object(c_rule);
		var c_txn = c_ruleObj.RULE_TXN;
		if(txnId != p_txn && txnId != c_txn){
			alert("不能删除父交易规则的连线");
			return ;
		}
		
		start_jsonObj.DIRECTIONAL.remove(ps[1]);// 删除开始节点指向的结束节点	
		$("input[id='"+ps[0]+"'][name='rulejson']").val(Obj2str(start_jsonObj));
		

		// 删除选择的连线
		$("span[name='"+select_lineName+"']").remove();
		$("input[name='"+select_lineName+"'][type='hidden']").remove();

	});
	
		
	// 规则删除按钮点击事件
	$('#del_rule').on('click',function(){
		// 获取选择的对象
		var radio_o = $("input[name='r'][type='radio']:checked"); 
		if (radio_o == null || radio_o.length == 0) {
			alert('#springMessage("view.tms.pub.checkbox.msg0")');
			return;
		}
		
		// 获取规则ID
		var tab = radio_o.parent().parent().parent().parent();
		var ruleId = tab.attr('id');
		
		var p_rule = $("input[id='"+ruleId+"'][name='rulejson']").val();
		var p_ruleObj = json2Object(p_rule);
		var p_txn = p_ruleObj.RULE_TXN;
		if(txnId != p_txn){
			alert("不能删除父交易的规则");
			return ;
		}
					
		var x = tab.css("left");// 获取规则的横坐标
		var y = tab.css("top");// 获取规则的纵坐标
		var x_1 = x.substring(0,x.length-2);;// 横坐标去掉PX
		var y_1 = y.substring(0,x.length-2);// 纵坐标去掉PX
		
		// 删除节点
		radio_o.parent().parent().parent().parent().remove();
		// 删除连线
		var allLine = $("input[type='hidden'][name='line']");
		$.each(allLine,function(i,item){
			var l = $(item).val();
			var ls = l.split("|");
			if(ls[0] == ruleId || ls[1] == ruleId){
				var delLineName = $(item).attr("id");
				$("span[name='"+delLineName+"']").remove();
				$("input[name='"+delLineName+"'][type='hidden']").remove();
				// 更新开始节点的JSON	
				if(ls[1] == ruleId){
					var start_json = $("input[id='"+ls[0]+"'][name='rulejson']").val(); 
					var start_jsonObj = json2Object(start_json);
					start_jsonObj.DIRECTIONAL.remove(ruleId);// 删除开始节点指向的结束节点	
					$("input[id='"+ls[0]+"'][name='rulejson']").val(Obj2str(start_jsonObj));
				}
			}
		});
		
	});
	
	// 规则有效性按钮点击事件
	$('#valid_rule').on('click',function(){
		var radio_o = $("input[name='r'][type='radio']:checked"); 
		if (radio_o == null || radio_o.length == 0) {
			alert('#springMessage("view.tms.pub.checkbox.msg0")');
			return;
		}
		var tab = radio_o.parent().parent().parent().parent();
		var ruleId = tab.attr('id');
		
		var start_json = $("input[id='"+ruleId+"'][name='rulejson']").val(); 
		var start_jsonObj = json2Object(start_json);

		var p_txn = start_jsonObj.RULE_TXN;
		if(txnId != p_txn){
			alert("不能修改父交易的规则有效性");
			return ;
		}

		var enable = start_jsonObj.RULE_ENABLE;
		if(enable == 1){
			start_jsonObj.RULE_ENABLE = '0' ;
			tab.children().children().find('img').attr('src',rootPath+"tms35/images/node_status_0.bmp");
		}else{
			start_jsonObj.RULE_ENABLE = '1' ;
			tab.children().children().find('img').attr('src',rootPath+"tms35/images/node_status_1.bmp");
		}
			
		$("input[id='"+ruleId+"'][name='rulejson']").val(Obj2str(start_jsonObj));
		
	});
	
	// 规则引用点按钮点击事件
	$('#ref_rule').click(function(data){
		// 获取选择的对象
		var radio_o = $("input[name='r'][type='radio']:checked"); 
		if (radio_o == null || radio_o.length == 0) {
			alert('#springMessage("view.tms.pub.checkbox.msg0")');
			return;
		}
		
		// 获取选中的规则ID
		var tab = radio_o.parent().parent().parent().parent();
		var ruleId = tab.attr('id');
		
		// 查询规则名称，调用引用接口
		jcl.postJSON('/tms35/rule/getRule','ruleId='+ruleId,function(data){
			var ruleName = data.row.RULE_NAME;
			window.showModalDialog("$rc.contextPath/tms/stat/refTree?txnId="+txnId+"&statName="+ruleName,'引用点','dialogWidth=1000px;dialogHeight=600px;resizable=yes');	
		});
			
	});
	
	// 保存图层按钮点击事件
	$('#save_image').click(function(data){
		var js = new Array();
		var json = $("input[name='rulejson']");
		$.each(json,function(i,j){
			js.push("rule="+$(j).val());
		});
		var param = js.join('&');; 
		// 查询规则名称，调用引用接口
		jcl.postJSON('/tms35/rule/saveRule',param+"&txnId="+txnId,function(data){
				
		});
			
	});
	
// 规则移动事件
$('table').on('mouseover',function(e){
		$('table').draggable({
			containment:'#drowDiv', // 拖动范围只在drowDiv区域
			scroll:true ,
			helper: 'clone' ,
			//revert: true,// 恢复到原位
			start:function(event,ui){ 
				
			},
			stop:function(event,ui){
				var img_x = this.style.left; // 开始拖动时记录节点的当前横坐标
				var img_y = this.style.top; // 开始拖动时记录节点的当前纵坐标
				var img_x_0 = parseInt(img_x.substring(0,img_x.length - 2));// 拖动的开始节点的横坐标去掉px
				var img_y_0 = parseInt(img_y.substring(0,img_y.length - 2));// 拖动的开始节点的纵坐标去掉px
				var new_img_x = parseInt(ui.position.left); // 拖动的节点停止的横坐标
				var new_img_y = parseInt(ui.position.top);// 拖动的节点停止的纵坐标

				var ruleId = $(this).attr('id');// 获取规则ID
				var _this = this;
				var isFind = false;
				// 校验是否能拖到该位置
				var jsonList =  $("input[name='rulejson'][type='hidden']"); 
				for (var i = 0; i < jsonList.length; i++) {
					for (var j = -10; j <= 10; j++) {
						for (var k = -10; k <= 10; k++) {
							if (jsonList[i].POSITION == ((new_img_x + j) + 'a' + (new_img_y + k))&&jsonList[i].RULE_ID!=ruleId ) {
								isFind = true;
								break;
							}
						}
						if (isFind) break;
					}
					if (isFind) break;
				}
				
				if (isFind) {
					alert("当前位置已存在节点");
					return;
				}
						
				var src = $(_this).find('img').attr('src');
				
				// 删除原来的节点
				$(_this).remove();
				
				// 画新节点
				var json = $(_this).find("input[name='rulejson']").val();
				var node = new Node(json,rootPath);
				node.setImgSrc(src);
				node.drawImg(new_img_x,new_img_y);
				// 更新当前节点的JSON的坐标
				var start_jsonObj = json2Object(json);
				start_jsonObj.POSITION = new_img_x+'a'+new_img_y;
				$("input[id='"+ruleId+"'][name='rulejson']").val(Obj2str(start_jsonObj));
					
				// 删除原来的连线,增加新的连线
				// 删除连线
				var allLine = $("input[type='hidden'][name='line']");
				$.each(allLine,function(i,item){
					var l = $(item).val();// 连线的开始节点RULEID和结束节点RULEID
					var ls = l.split("|");
					
					if(ls[0] == ruleId || ls[1] == ruleId){
						var delLineName = $(item).attr("id");
						$("span[name='"+delLineName+"']").remove();
						
						// 增加连线
						var start_x_1 ;
						var start_y_1 ;
						var end_x_1 ;
						var end_y_1 ;
						if(ls[1] == ruleId){
							var startJson = $("input[id='"+ls[0]+"'][name='rulejson']").val();
							var start_jsonObj = json2Object(startJson);
							var p = start_jsonObj.POSITION;
							var s = p.split('a');
							start_x_1 = s[0];
							start_y_1 = s[1];
							end_x_1 = new_img_x;
							end_y_1 = new_img_y;
						}else{
							start_x_1 = new_img_x;
							start_y_1 = new_img_y;
							var startJson = $("input[id='"+ls[1]+"'][name='rulejson']").val();
							var start_jsonObj = json2Object(startJson);
							var p = start_jsonObj.POSITION;
							var s = p.split('a');
							end_x_1 = s[0];
							end_y_1 = s[1];
						}
						
						var line = new Line(delLineName); 
						// 连接开始点和结束点
						line.drawArrowLine(parseInt(start_x_1), parseInt(start_y_1) , parseInt(end_x_1), parseInt(end_y_1));  
					}
				});
					
			}
		});
	});

});


Array.prototype.indexOf = function(val) {
	for (var i = 0; i < this.length; i++) {                
		if (this[i] == val) 
			return i;            
		}            
		return -1;        
	};        
Array.prototype.remove = function(val) {
	var index = this.indexOf(val);   
	if (index > -1) {                
		this.splice(index, 1);            
	}        
};


// 查找能用的坐标
function queryUnUsedPoint(p_x,p_y){
	var jsonList =  $("input[name='rulejson']"); 
	var y1 = p_y;
	var x = p_x;
	// 如果没有nodeArr，返回默认坐标
	if (jsonList == null || jsonList.length == 0) {
		var point = new Array();
		point.push(x);
		point.push(y1);
		return point;
	}
	
	// 循环查找没有被使用的坐标，找到后返回.步长100后20*20范围
	for(var x1 = 1; x1<=10; x1++){
		var isFind = false;
		for(var i=0;i<jsonList.length;i++){
			for(var j = -10; j <= 10; j++){
				for (var k = -10; k <= 10; k++) {
					if (json2Object($(jsonList[i]).val()).POSITION == ((x1 * 100 + j) + 'a' + (y1 + k))) {
						if (x1 == 10) {
							y1 = y1 + 100;
							x1 = 0;
						}
						isFind = true;
						break;
					}
				}	
				if(isFind) break;	
			}
			if(isFind) break;
		}
		if(!isFind){
			var point = new Array();
			point.push(x1*100);
			point.push(y1);
			return point;
		}
	}
	
}

// 查询指向的节点的坐标
function queryPostByRuleId(jsonList,ruleId){
	$.each(jsonList, function(idx,item){
		var rule = json2Object(item);
		if(ruleId == rule.RULE_ID){
			pos = rule.POSITION;
			return false;// 结束循环
		}
	});
	return pos;
}

// 增加一个节点,增加规则回调函数
function addNode(json,x,y){
	// 画节点
	var node = new Node(json,'$rc.contextPath/s/');
	node.drawImg(x,y);
}

// 修改节点规则名称
function editNode(json){
	// 获取选择的规则对象
	var radio_o = $("input[name='r'][type='radio']:checked"); 
	
	var josnObj = json2Object(json);
	
	// 获取规则ID
	var font = radio_o.parent().find('FONT');
	font.text(josnObj.RULE_DESC);
	
	var rule = radio_o.parent().find("input[name='rulejson']");
	rule.val(json);
}

// 增加连线,把开始节点（父规则）的指向到子规则
function updateJson_addLine(p_ruleid,c_ruleid){
	var p_rule = $("input[id='"+p_ruleid+"'][name='rulejson']").val();
	var p_ruleObj = json2Object(p_rule);
	var d = p_ruleObj.DIRECTIONAL;
	d.push(c_ruleid);
	$("input[id='"+p_ruleid+"'][name='rulejson']").val(Obj2str(p_ruleObj));
}

// 查看是否存在连线
function queryLineIsExistAll(x1,y1,x2,y2){
	if(queryLineIsExist(x1,y1,x2,y2) || queryLineIsExist(x2,y2,x1,y1)){
		return ture;
	}
}


function queryLineIsExist(x1,y1,x2,y2){
	var isExist = false;// 不存在
	
	var s_p = x1+'a'+y1;// 开始节点坐标
	var e_p = x2+'a'+y2;// 结束节点坐标
	
	var jsonList = $("input[name='rulejson'][type='hidden']");
	
	// 循环查找开始节点的规则，找到后查找该规则的指向是否存在结束节点的规则
	$.each(jsonList, function(idx,item){
		var i = $(item).val();
		var item_obj = json2Object(i);
		var ruleId = item_obj.RULEID;
		var directionals = item_obj.DIRECTIONAL;
		var position = item_obj.POSITION;// 规则坐标【XaY】
		if(position == s_p){
			$.each(directionals,function(d_r_idx,d_r_item){
				$.each(jsonList,function(rl_idx,rl_item){
					if(rl_item.RULEID==d_r_item && rl_item.POSITION == e_p){
						isExist = true;// 存在
						return false;
					}	
				});
				if(isExist) return false;		
			});
			if(isExist) return false;	
		}
	});
	return isExist;
}

</script> 
</head>
	<body>
		<div>
			<input type="button" id='add_rule' value="新建规则" class="btn"/>
			<input type="button" id='edit_rule' value="修改规则" class="btn"/>
			<input type="button" id='del_rule' value="删除规则" class="btn"/>
			<input type="button" id='valid_rule' value="规则有效性" class="btn"/>
			<input type="button" id='ref_rule' value="引用点" class="btn"/>
			<input type="button" id='drow_line' value="画连接线" class="btn"/>
			<input type="button" id='del_line' value="删连接线" class="btn"/>
			<input type="button" id='save_image' value="保存图层" class="btn"/>
		</div>
		<div id="drowDiv"  style="width:1300px;height:650px;overflow:auto;"></div>
	</body>
	</html>