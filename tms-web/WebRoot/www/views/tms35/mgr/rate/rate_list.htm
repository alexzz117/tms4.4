<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>评级管理</title>
<link href="$rc.contextPath/s/common/css/page.css" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="$rc.contextPath/s/common/js/jquery.min.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/common/js/browser.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/common/js/jcl.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/common/env/env.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/common/env/message.js"></script>
<script type="text/javascript">
var g = "";
$(document).ready(function(){
	
	//组装表格
	 g = $("#boxdiv").grid({
		title:'评级管理',
		//checkboxEnable:false,
		toolbar:[
			{id:"rate-btn-edit", icon:"icon-tb-edit", text:"编辑", enable:'oneRowSelected'}
		],
		columns:[
			{name:'评级名称', width: 20, dataIndex:'RS_NAME'},
			{name:'交易类型', width: 50, dataIndex:'TAB_NAME'},
			{name:'表名', width: 20, dataIndex:'TABLE_NAME'},
			{name:'主键', width: 20, dataIndex:'TABLE_PK'},
			{name:'分值等级', width: 90, dataIndex:'LEVEL_SCORE_DESC'}
		],
		ds:{
			url:"/tms35/rate/list",
			params:{},
			callback:function(list){
				for(var i = 0; i < list.length; i++){
					var level_value = list[i]['LEVEL_SCORE'];
					list[i]['LEVEL_SCORE_DESC']= parsePsValueToDesc(parseLevelValue(level_value));
				}
			}
		},
		pagebar: false,
		qform: {}

	});
	g.goPage();
	
	// 注册增加按钮	
	$('#param_add_btn').click(function(){
		insertNewLevel(null, null);
	});
		
	// 注册删除按钮
	$('#param_del_btn').click(function(){
		delLevel();
	});
	// 注册确定按钮
	$('#param_sav_btn').click(function(){
		saveLevel();
	});
	
	var level_value_dialog = new jcl.ui.Dialog({
		"title" : '分值-100到100,前闭后开', 
		draggable:true
	});
	
	var idx = 1;
	$('#rate-btn-edit').click(function(data){
		
		var rows = g.selectedRows();
		if(rows.length!=1){
			return;
		}
		idx = 1;
		$('#level_list #level_table tr:gt(1)').remove();
		$('#level_list').show();
		
		var level_value = g.selectedOneRow().LEVEL_SCORE;
		var level_value_arr = parseLevelValue(level_value);
					
		$.each(level_value_arr, function (i, level_value_obj){
			insertNewLevel(level_value_obj, null);
		});
		level_value_dialog.addDom('level_list');
		level_value_dialog.show();
	});
	
	
	function parseLevelValue(value){
		// 0,1|30,2|50,3|80,4
		var level_value_arr = [];
		
		if(value == null || value.length==0) return level_value_arr;
				
		var score_arr = [];
		var level_code_id_arr = [];
		var val_arr = [];
		if (value.indexOf(',') > -1 || value.indexOf('|') > -1) {
			val_arr = value.split('|');
		} else{
			return null;
		};
		
		var last_value_s;
		$.each(val_arr, function(idx, arr){
			var firstScore = arr.split(',')[0];
			var ps_code_id = arr.split(',')[1];
			
			score_arr[idx*2] = firstScore;
			if(idx==0){
				score_arr[idx+1] = '100';
			}
			else{
				score_arr[idx*2+1] = last_value_s;
			}
			last_value_s=firstScore;
			level_code_id_arr[idx] = ps_code_id;
		});
		
		$.each(level_code_id_arr, function(idx, ps_code_id){
			var ps_value_obj = {};
			ps_value_obj['level_value_code'] = ps_code_id;
			ps_value_obj['start_score'] = parseFloat(score_arr[idx * 2]);//(parseFloat(score_arr[idx * 2]) + (idx == 0 ? 0 : 1));
			ps_value_obj['end_score'] = score_arr[idx * 2 + 1];
			level_value_arr.push(ps_value_obj);
		});
		return level_value_arr;
	}
			
	function parsePsValueToDesc(list){
		var disp_val = '';
		var length = list.length;
		$.each(list, function(idx, ps_value_obj){
			disp_val+= getLevelCodeValue(ps_value_obj.level_value_code);
			disp_val+= '[';
			disp_val+= ps_value_obj.start_score;
			disp_val+= '~';
			disp_val+= ps_value_obj.end_score;
			disp_val+= ')';
			idx == length - 1 ? '' :disp_val+= ',';
		});
		return disp_val;
	}

	
	function insertNewLevel(level_value_obj, a){
		
		if(idx>10){
			alert("最大10个等级");
			return;
		}
		
		var td0 = "<input type='hidden' name='PS_POV' value="+idx+" />"
			td0 += getLevelCodeValue(idx)+"： ";
		var td1 = "<input type='text' name='start_score' ";
		var td2 = "至";
		var td3 = "<input type='text' name='end_score' ";
		
		if(level_value_obj!=null){
			td1 += " value='"+level_value_obj.start_score+"'";
			td3 += " value='"+level_value_obj.end_score+"'";
		}
		td1 += " />";
		td3 += " />";
		
		$('#level_list #level_table').append("<tr align='center'><td>"+td0+"</td><td>" + td1 +"</td><td>" + td2 +"</td><td>" + td3 +"</td></tr>");
		idx++;
	}
	
	function delLevel(){
		if(idx == 2){
			alert('第一行不能删除');
			return;	
		}
		
		$('#level_table tr:eq('+idx+')').remove();
		idx--;
	}

	function saveLevel(){
		var ps_and_value_obj_arr = [];
		// 收集所有处置状态和处置值
		$('#level_table [name=PS_POV]').each(function(i, v_obj){
			var ps_and_value_obj = {};
			ps_and_value_obj.ps_key = $(this).val();
			ps_and_value_obj.ps_value_s = $('#level_table [name=start_score]').eq(i).val();
			ps_and_value_obj.ps_value_e = $('#level_table [name=end_score]').eq(i).val();
			ps_and_value_obj_arr.push(ps_and_value_obj);
		});
		
		// 遍历收集到的数据,前闭后闭区间,做校验
		var key_arr = [], same = false, not_null = false, start_val_null = false, // has 0
 		end_val_null = false, // has 100
 		error_type = "", last_obj = {}, compare_good = false, disp_val = '', ps_key_mix = '';
		
		
		$.each(ps_and_value_obj_arr, function(idx, ps_and_value_obj){
			var ps_key = ps_and_value_obj.ps_key;
			var ps_value_s = ps_and_value_obj.ps_value_s;
			var ps_value_e = ps_and_value_obj.ps_value_e;
			
			// 非空
			if (ps_value_s == null || ps_value_s == '' || ps_value_e == null || ps_value_e == '') {
				not_null = true;
			}
			// 第一行区间开始值不能> 100
			if (idx == 0 && ps_value_e < 100) {
				end_val_null = true;
				return false;
			}
			// 最后一行区间结束值不能 < -100					
			if (idx == ps_and_value_obj_arr.length - 1 && ps_value_s > -100) {
				start_val_null = true;
				return false;
			}
			
			ps_key_mix += ps_value_s;
			ps_key_mix += ",";
			ps_key_mix += ps_key;
			if (idx != ps_and_value_obj_arr.length - 1) {
				ps_key_mix += '|';
			}
			
			
			disp_val += getLevelCodeValue(ps_key);
			disp_val += '[';
			disp_val += ps_value_s;
			disp_val += '~';
			disp_val += ps_value_e;
			disp_val += ')';
			if (idx == 0) {
				last_obj = ps_and_value_obj;
				return true;
			}
			
			compare_good = compareWithLast(ps_and_value_obj, last_obj);
			if (compare_good) {
				return false;
			}
			last_obj = ps_and_value_obj;
		});
		
		
		function compareWithLast(current, last){
			var flag = false;
			var reg = /^-?\d+(\.\d{2})?$/;
			if (!reg.test(current.ps_value_s) ||
			!reg.test(current.ps_value_e) ||
			!reg.test(last.ps_value_s) ||
			!reg.test(last.ps_value_e)) {
				alert("分值必须为整数或保留两位的小数");
				return true;
			}
			var currentSS = parseFloat(current.ps_value_s), 
			currentES = parseFloat(current.ps_value_e), 
			lastSS = parseFloat(last.ps_value_s), 
			lastES = parseFloat(last.ps_value_e);
			if (lastSS != currentES ||
			lastSS > 100 ||
			lastSS < -100 ||
			lastES > 100 ||
			lastES < -100 ||
			currentSS > 100 ||
			currentSS < -100 ||
			currentES > 100 ||
			currentES < -100 ||
			lastSS >= lastES ||
			currentSS >= currentES) {
				alert('分值值区间错误，必须为连续递减的区间值');
				return true;
			}
			return flag;
		}
		if (compare_good) {
			return false;
		}
		if (not_null) {
			alert('分值不能为空');
			return false;
		}
		if (start_val_null) {
			alert('最小分值必须等于-100');
			return false;
		}
		if (end_val_null) {
			alert('最大分值必须等于100');
			return false;
		}
		
		/*alert(disp_val);
		alert(ps_key_mix);*/
		var params = "LEVEL_SCORE="+ps_key_mix+"&RS_ID="+g.selectedOneRow().RS_ID+"&RS_NAME="+g.selectedOneRow().RS_NAME;
		//alert(params);
		jcl.postJSON('/tms35/rate/mod', params, function(data){
			level_value_dialog.hide();
			jcl.msg.info('#springMessage("view.cmc.pub.edit.success")');
			g.goPage();
		});
	}
		
	function getLevelCodeValue(level_code){
		return '等级'+level_code;
	}
});


</script>

</head>
<body>

<div id="boxdiv" class="box"></div>
<div id="level_list" style="display:none" >
	<table border='0' id='level_table' >
		<tr class="column-cell">
			<td width='100%' align="left" colspan='4'>
				<input type='button' value='增加' class='btn' id='param_add_btn'/>
				<input type='button' value='删除' class='btn' id='param_del_btn'/>
				<input type='button' value='确定' class='btn' id='param_sav_btn'  />
			</td>
		</tr>
		<tr class="column-cell">
			<td width='20%' align="center">等级</td>
			<td width='35%' align="center">开始值</td>
			<td width='10%' align="center"></td>
			<td width='35%' align="center">结束值</td>
		</tr>
	</table>
</div>
</body>
</html>
