<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>#springMessage("view.tms.alarm.process.title")</title>
<link href="$rc.contextPath/s/common/css/page.css" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="$rc.contextPath/s/common/js/jquery.min.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/common/js/browser.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/common/js/jcl.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/tms35/js/commoncheck.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/common/env/env.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/common/env/message.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/common/js/jquery.url.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/common/js/validate.js"></script>
<script type="text/javascript" src="$rc.contextPath/s/tms35/js/cond.js"></script>
<script type="text/javascript">
var txnCode = jQuery.url.param('txnCode');
var disposal = jQuery.url.param('disposal');
var userid = jQuery.url.param('userid');
var username = jQuery.url.param('username');
var txnstatus = jQuery.url.param('txnstatus');
$(document).ready(function(){
	var psBox = new jcl.ui.Box({
		title:'#springMessage("view.tms.alarm.process.title")'
	});
	
	// 欺诈类型、处理信息Form
	var psForm = new jcl.ui.Form({
		display: true,
		layout: 'list',
		items:[
			{label: '#springMessage("view.tms.alarm.process.fraudtype")', name: 'FRAUD_TYPE', type: 'selector', 
				items:[{text:'--请选择--', value:''}], ds:{type:'code', category:'tms.alarm.fraudtype'}, required:true},
			{label: '#springMessage("view.tms.alarm.process.info")', name: 'PS_INFO', type: 'textarea'}
		],
		btns : [
			{id: 'ps_sure', text: '#springMessage("view.tms.alarm.process.submit.audit")'},
			{id: 'ps_cancel', text: '#springMessage("view.tms.pub.btn.cancel")'}
		]
	}, psBox.container);
	
	// 会员报警事件处理历史列表
	var psActionGrid1 = new jcl.ui.Grid({
		title:'会员报警事件处理历史,客户号：'+(userid=='null'?'':userid)+', 客户名称:'+(username=='undefined' || username=='null'?'':username),
		marginTop:0,
		table:{
			checkboxEnable:false,
			columns:[
				{name:'报警事件流水号', width: 35, dataIndex:'TXNCODE'},
				{name:'欺诈类型', width: 35, dataIndex:'FRAUD_TYPE',render:'tms.alarm.fraudtype'},
				{name:'处理信息', width: 35, dataIndex:'PS_INFO'},
				{name:'快捷动作', width: 35, dataIndex:'SHORT_ACTION'},
				{name:'处理时间', width: 35, dataIndex:'PS_TIME', render:'datetime'}
			],
			ds:{
				url:"/tms/alarmevent/getAlarmHis",
				params:{userid:userid}
			},
			pagebar: true
		}
	}, psForm.jqDom.find('.form-items'));
	
	psActionGrid1.goPage();
		
	// 绑定报警历史标题的点击事件：隐藏/显示
	displayBoxContent(psActionGrid1.jqDom.find('.box-title'), psActionGrid1.container);
	psActionGrid1.container.hide();
	// 处理动作列表
	var psActionGrid = new jcl.ui.Grid({
		title:'#springMessage("view.tms.alarm.process.action.list")',
		marginTop:0,
		toolbar: [
			{id:"btn-tm-add", icon:"icon-tb-add", text:'#springMessage("view.tms.alarm.process.action.addRow")', action:'addRow'},
			{id:"btn-tm-del", icon:"icon-tb-del", text:'#springMessage("view.tms.alarm.process.action.delRow")', enable:'rowSelected'}
		],
		table:{
			checkboxEnable:true,
			columns:[
				{name:'#springMessage("view.tms.alarm.process.action.name")', width: 35, dataIndex:'AC_NAME'},
				{name:'#springMessage("view.tms.alarm.process.action.cond")', width: 35, dataIndex:'AC_COND_IN'},
				{name:'#springMessage("view.tms.alarm.process.action.expr")', width: 35, dataIndex:'AC_EXPR_IN'}
			],
			rowForm:{
				items:[
					{label:'#springMessage("view.tms.alarm.process.action.name")', name:'AC_NAME', type:'text', required:true},
					{label:'#springMessage("view.tms.alarm.process.action.cond")', name:'AC_COND_IN', type:'text'},
					{label:'#springMessage("view.tms.alarm.process.action.cond")', name:'AC_COND', type:'hidden'},
					{label:'#springMessage("view.tms.alarm.process.action.expr")', name:'AC_EXPR_IN', type:'text', required:true},
					{label:'#springMessage("view.tms.alarm.process.action.expr")', name:'AC_EXPR', type:'hidden'}
				],
				btns:[
                    {text:'确定', id:'row-edit-sure', action:'submit'},
                    {text:'取消', id:'row-edit-cancel', action: 'cancel'}
                ]
			},
			pagebar: false
		}
	}, psForm.jqDom.find('.form-items'));
	
	var short_act_checkbox;
	var pause_js_time ;
	jcl.postJSON('/tms/alarmevent/shortActionList', "", function(data1){
		var func_list = [];
		$.each(data1.list,function(idx, row){
			if(row.VALUE=='trans_pass'||row.VALUE=='trans_block'){
				if(disposal=='PS04' && (txnstatus=='' || txnstatus=='undefined' || txnstatus=='null')){
					func_list.push({text:row.TEXT,value:row.VALUE});	
				}
				return true;
			}
			func_list.push({text:row.TEXT,value:row.VALUE});
		});
		var shot_action_box = new jcl.ui.Box({title:'快捷动作'}, psActionGrid.jqDom);
		var shot_action_form = new jcl.ui.Form({},shot_action_box.container);
		short_act_checkbox = new jcl.ui.formItem.Checkbox({ds:null, items:func_list},shot_action_form);
		pause_js_time = new jcl.ui.formItem.DateSelector({label: '暂停结算时间', name: 'case_time', type: 'date', layout:'datetime'},shot_action_form);
		pause_js_time.disable();
		
		// 绑定checkbox单击事件
		short_act_checkbox.jqDom.on('click', ':checkbox', function(){
			if($(this).attr('value')=='pause_js'){
				if($(this).attr('checked')){
					pause_js_time.enable();
				}else{
					pause_js_time.disable();
				}
			}
		});
	});
	
	var _ce = new condEdit();
	params = [];
	params.push({name:'TXN_CODE', value:txnCode});
	jcl.postJSON('/tms/alarmevent/process', params, function(data){
		var txn = data['txnMap'], acts = data['actList'];
		if (txn) {
			psForm.getItem('FRAUD_TYPE').val(txn['FRAUD_TYPE']);
			var psStatus = txn['PSSTATUS'];
			if (!(psStatus == '02' || psStatus == '04')) {
				disableView(psForm, psActionGrid);
			}
			var txnId = txn['TXNTYPE'];
			// 表单条件双击
			psActionGrid.table.rowForm.jqDom.on('dblclick', '[name=AC_COND_IN]', function(){
				_ce.init_cond(psActionGrid.table.rowForm.getItem('AC_COND').component,$(this),txnId, ['STAT_FN','RULE_FUNC','AC_FUNC'],'条件');
			});
			
			psActionGrid.table.rowForm.jqDom.on('dblclick', '[name=AC_EXPR_IN]', function(){
				_ce.init_cond(psActionGrid.table.rowForm.getItem('AC_EXPR').component,$(this),txnId, ['STAT_FN','RULE_FUNC'],'表达式');
			});
		}
		if (acts) {
			psActionGrid.renderPage({list:acts});
		}
		
	}, false);
	
	// 处置方式为挂起时,动作函数中增加[放行、阻断]函数,其他处置方式要过滤掉
	_ce.cond_form().getItem('AC_FUNC').jqDom.on({
		'click':function(){
			if (disposal){
				var ac_func = _ce.cond_form().getItem('AC_FUNC');
				var items = ac_func.component.opts.items;
				var _items_ = [], item = null, val = null;
				for (var i = 0, len = items.length; i < len; i++){
					item = items[i];
					val = item['value'];
					if (val == '' || val == 'add_roster'){
						_items_.push(item);
					}
				}
				ac_func.component.reload(_items_);
			}
		}
	}, 'input.selector-itext');
	
	psActionGrid.table.onRowFormSubmit(function(rowFormJqDom, rowData, isAdd){
		try {
			var ac_name = rowData['AC_NAME'], ac_cond = rowData['AC_COND'], ac_expr = rowData['AC_EXPR'];
			if (!IsEmpty(ac_name)) {
				throw '#springMessage("view.tms.alarm.process.action.name")'+'不能为空';
			}
			if (!IsEmpty(ac_expr)) {
				throw '#springMessage("view.tms.alarm.process.action.expr")'+'不能为空';
			}
			if (!checkeLength(ac_name, 64)) {
				throw '#springMessage("view.tms.alarm.process.action.name")'+'不能超过64字符';
			}
			if (IsEmpty(ac_cond)) {
				if(!checkeLength(ac_cond, 255)) {
					throw '#springMessage("view.tms.alarm.process.action.cond")'+'不能超过255字符';					
				}
			}
			if (!checkeLength(ac_expr, 255)) {
				throw '#springMessage("view.tms.alarm.process.action.expr")'+'不能超过255字符';
			}
			var param = rowFormJqDom.serializeArray();
			param = param.concat(params);
			//console.log(param);
			jcl.postJSON('/tms/alarmevent/addPsAct', param, function(data){
				psActionGrid.table.updateEditingRow(data.row);
				jcl.msg.info('保存成功');
			});
		} catch (e) {
			jcl.msg.error(e);
		}
	});
	
	psActionGrid.toolbar.onClick('#btn-tm-del', function(){
    	if(confirm('确定删除？')){
    		var rows = psActionGrid.selectedRows();
    		var acts = [], param = [];
    		for (var i = 0; i < rows.length; i++) {
    			acts.push(rows[i]['AC_ID']);
    		}
    		param = param.concat(params);
    		param.push({name:'psActs', value:acts.join(',')});
			jcl.postJSON('/tms/alarmevent/delPsAct', param, function(data){
				psActionGrid.table.deleteSelectedRow();
				alert("删除成功");
			});
			return true;
		}
		return false;
    });
	var isSure = false;
	$("#ps_sure").click(function(){
		try {
			var this_btn = $(this);
			if (!IsEmpty(psForm.getItem('FRAUD_TYPE').val())) {
				throw '#springMessage("view.tms.alarm.process.fraudtype")'+'不能为空';
			}
			var ps_info = psForm.getItem('PS_INFO').val();
			//if (!IsEmpty(ps_info)) {
			//	throw '#springMessage("view.tms.alarm.process.info")'+'不能为空';
			//}
			if (!checkeLength(ps_info, 255)) {
				throw '#springMessage("view.tms.alarm.process.info")'+'不能超过255字符';
			}
			// 挂起的快捷动作必须选择‘放行’或‘阻断’
			if(disposal=='PS04' && (txnstatus=='' || txnstatus=='undefined' || txnstatus=='null')){
				if(short_act_checkbox.val().indexOf('trans_pass')<0 && short_act_checkbox.val().indexOf('trans_block')<0)
					throw '快捷动作必须包含放行或阻断！';
				if(short_act_checkbox.val().indexOf('trans_pass')>=0 && short_act_checkbox.val().indexOf('trans_block')>=0)
					throw '快捷动作放行或阻断，只能选择一个！';
			}
			
			var param = psForm.jqDom.serializeArray();
			param.push({name:"PSSTATUS", value:"03"});
			param.push({name:'PS_TYPE', value:'1'});
			param.push({name:'PS_RESULT', value:'1'});
			param.push({name:'PAUS_JS_TIME', value:pause_js_time.val()});
			param.push({name:'SHORT_ACTION', value:short_act_checkbox.val()});
			param = param.concat(params);
			jcl.postJSON('/tms/alarmevent/saveProcess', param, function(data){
				disableView(psForm, psActionGrid);
				isSure = true;
				jcl.msg.info('提交审核成功');
				window.returnValue = 1;
				window.close();
			});
		} catch (e) {
			jcl.msg.error(e);
		}
	});
	
	$("#ps_cancel").click(function(){
		if(isSure)
			window.returnValue = 1;
		window.close();
	});
	
	//隐藏/展开相应的层
	function displayBoxContent(trigger, content){
		trigger.on('click', function(){
			if(content.is(':hidden')){
				content.show();
			}else{
				content.hide();
			}
		})
	}
});
function disableView(psForm, psActionGrid) {
	$("#ps_sure").hide();
	psForm.disable('FRAUD_TYPE', true);
	psForm.disable('PS_INFO', true);
	psActionGrid.table.unEditRow();
	psActionGrid.jqDom.find('[type=checkbox]').prop('disabled', true);
	psActionGrid.table.jqDom.off('click', 'div.row');
	psActionGrid.toolbar.disable($('#btn-tm-add'), true);
	psActionGrid.toolbar.disable($('#btn-tm-del'), true);
}
</script>
</head>
<body>
</body>
</html>